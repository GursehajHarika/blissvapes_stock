// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "sqlite"
  url      = "file:dev.sqlite"
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model Product {
  id          String           @id @default(cuid())
  shopifyGid  String           @unique
  handle      String
  title       String
  vendor      String?
  productType String?
  status      String?
  tagsCsv     String?
  createdAt   DateTime
  updatedAt   DateTime
  publishedAt DateTime?
  variants    ProductVariant[]
}

model ProductVariant {
  id               String   @id @default(cuid())
  shopifyGid       String   @unique
  inventoryItemGid String?  @unique
  legacyId         BigInt?
  product          Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId        String
  title            String?
  sku              String?
  price            Decimal
  compareAtPrice   Decimal?
  position         Int?
  availableForSale Boolean?
  createdAt        DateTime
  updatedAt        DateTime

  inventoryLevels VariantInventoryLevel[]
  counts          PhysicalCount[]         @relation(name: "VariantCounts")
  saleEvents      SaleEvent[]             @relation("VariantToSaleEvents")
}

model VariantInventoryLevel {
  id           String         @id @default(cuid())
  variant      ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId    String
  locationGid  String
  locationName String
  available    Int

  @@index([variantId])
}

model User {
  id String @id @default(cuid())

  shop      String
  staffId   String   @unique
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String? @unique
  name  String?

  counts PhysicalCount[]

  @@index([shop])
}

model PhysicalCount {
  id        String   @id @default(cuid())
  variantId String
  userId    String?
  counted   Int
  note      String?
  createdAt DateTime @default(now())

  variant ProductVariant @relation("VariantCounts", fields: [variantId], references: [id], onDelete: Cascade)
  user    User?          @relation(fields: [userId], references: [id])

  @@index([variantId, createdAt])
}

model SaleEvent {
  id         String         @id @default(cuid())
  variant    ProductVariant @relation("VariantToSaleEvents", fields: [variantId], references: [id], onDelete: Cascade)
  variantId  String
  quantity   Int // positive for sold, negative if you later support returns
  occurredAt DateTime       @default(now())

  @@index([variantId, occurredAt])
}
